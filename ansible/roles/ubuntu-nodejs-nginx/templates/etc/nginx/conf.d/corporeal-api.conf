
server {
    listen 8080 ssl;
    server_name  {{ server_name }};

    # Configure the Certificate and Key you got from your CA (e.g. Lets Encrypt)
    {% if ssl_copy_day is defined %}
        ssl_certificate     /etc/ssl/certs/dfcert.crt;
        ssl_certificate_key /etc/ssl/private/dfcert.key;
    {% endif %}

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Only use TLS v1.2 as Transport Security Protocol
    ssl_protocols TLSv1.2;

    # Only use ciphersuites that are considered modern and secure by Mozilla
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';

    # Do not let attackers downgrade the ciphersuites in Client Hello
    # Always use server-side offered ciphersuites
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security max-age=15768000;

    gzip            on;
    gzip_min_length 1000;
    gzip_comp_level 9;
    gzip_proxied    any;
    gzip_types      application/json;

    location / {
        proxy_pass http://127.0.0.1:{{ pm2_port }};
        proxy_hide_header Cache-Control;
        proxy_connect_timeout 120;
        proxy_send_timeout 120;
        proxy_read_timeout 120;
        send_timeout 120;

        add_header X-Cache-Status $upstream_cache_status;
        client_max_body_size 5M;
    }

    ## Security Headers
    add_header X-Frame-Options "DENY";
    add_header X-Content-Type-Options "nosniff";
    add_header X-XSS-Protection "1; mode=block";
}
